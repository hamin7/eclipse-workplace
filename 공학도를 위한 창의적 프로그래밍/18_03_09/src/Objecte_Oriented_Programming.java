
public class Objecte_Oriented_Programming {

}
/* 
 * 절차적 언어.
 * - 위에서 아래로 수행/함수를 호출하면 정지되었다 결과값을 리턴하면 다시 수행되는 구조
 * - 함수의 흐름이 간단하고 구조화 되어 읽기 쉽다
 * - 구조화 모듈러 프로그래밍
 * - C / Pascal
 * 
 * 객체지향언어
 * - 오브젝트를 기반으로 메소드를 호출하는 형태로 수행됨
 * - 클래스를 기반으로 오브젝트를 생성
 * - C++ / Java / C#
 * 
 * 함수형 언어
 * - 함수의 인자로 함수를 넘길 수 있다.
 * - 람다연산
 * - 코드는 짧지만 난해
 * - Scala, Haskel
 * 
 * 절차적 언어의 특징과 장단점
 * - 코드가 순차적으로 실행(위에서 아래로)
 * - 서브루틴/함수를 사용
 * - 장점
 *   - 코드의 가독성 향상
 *   - 함수 호출 시 정지 되었다 리턴되면 실행
 *   - 블럭을 사용
 *   
 *   - 단점
 *   
*/
